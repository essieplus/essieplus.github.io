<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://essieplus.github.io</id>
    <title>EssiePlus</title>
    <updated>2022-11-24T15:43:00.835Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://essieplus.github.io"/>
    <link rel="self" href="https://essieplus.github.io/atom.xml"/>
    <subtitle>Essie plus the world.</subtitle>
    <logo>https://essieplus.github.io/images/avatar.png</logo>
    <icon>https://essieplus.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, EssiePlus</rights>
    <entry>
        <title type="html"><![CDATA[SRE 工作流探索]]></title>
        <id>https://essieplus.github.io/post/sre-workflow/</id>
        <link href="https://essieplus.github.io/post/sre-workflow/">
        </link>
        <updated>2022-11-10T08:07:57.000Z</updated>
        <summary type="html"><![CDATA[<p>探索 SRE/DevOps 舒适的工作流</p>
]]></summary>
        <content type="html"><![CDATA[<p>探索 SRE/DevOps 舒适的工作流</p>
<!-- more -->
<p>SRE在不同公司有不同的侧重，我的工作除了继续开发一些工具和订制solution以外还包含本公司商用软件的安装，升级，备份，以及trouble shooting，对客户环境的分析和支持。在传统的开发工作流以外，还需要一个舒适的SRE工作流来支持日常的工作。以下是我比较舒适的工作流分享，希望对你有帮助。</p>
<h1 id="vs-code执行性-snippet-terminal">VS Code：执行性 snippet + terminal</h1>
<p>商业软件的SRE有非常多的考量，在搭建，升级，以及解决客户问题中，需要与自己公司的命令行工具，本公司的operator群，OCP/K8S平台，存储等等打交道。虽然对于固定的环境有固定的脚本和pipeline，但是真的接触客户的环境时，还要需要按需要按情况给出解决方案。</p>
<p>这种情况下我的workspace是VS Code打到全屏模式，打开多tab安装或配置脚本的同时，在下方打开terminal，这样可以根据自己的需要复制要运行的命令到下方terminal执行。</p>
<p>这对于脚本的单条（或者snippet）执行友好性有一定的要求，不能够过于依赖于上下文的变量，即除了整个环境需要的基础信息作为全局变量，比如operator安装的namespace，或者是cluster中的基本参数，此外不是很适合局部的变量或者函数。否则很容易陷入还需要当场读代码，发现某个局部变量的值是空，还需要更多的命令生成该变量。</p>
<p>当然会有人质疑这样的脚本是不是太弱智，不是合格的程序，我认为这不是程序，只是功能脚本片段，这样的脚本面向的用户是人，是公司的客户支持人员，是客户的IT，不是CI/CD pipeline，所以完全可以不必把这看作代码～</p>
<h1 id="浏览器toby-iterm2">浏览器Toby + iTerm2</h1>
<p>Toby是优秀的浏览器插件，Firefox，Chrome等等都支持，只要一个账号就可以同步，非常适合保存当前浏览器打开的所有tab，并且按照collection来分类。</p>
<p>iTerm2 是非常优秀的mac terminal工具，我会将其配置成如Guake的下拉半透明风格，并每次换电脑的时候导出导入配置文件。iTerm2的功能很强大，提供tablet功能，方便的使用常用命令；还提供方便的横竖分屏，作为linux中度使用小白非常的喜欢。</p>
<p>如果我要进行一些略微复杂要参考很多文档的任务，还要与同事一起讨论，一般都是由我共享屏幕（我的工作流比较流畅，不容易失去焦点）。我会打开一个toby collection，里面包括执行的环境的OCP web console，相关的内部github wiki，online文档相关的几个页面，使用快捷键召唤和收起iTerm2窗口，这样就可以丝滑的同屏阅读文档并将命令复制到iTerm2执行。过程中打开更多的网页最后我会更新到这个Toby collection里（一键保存到当前collection，非常舒适）。并且会创建一个collection的note，记载一下目前的情况。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[最简笔记-博客-流]]></title>
        <id>https://essieplus.github.io/post/bi-ji-bo-ke-liu/</id>
        <link href="https://essieplus.github.io/post/bi-ji-bo-ke-liu/">
        </link>
        <updated>2022-08-17T06:53:10.000Z</updated>
        <content type="html"><![CDATA[<h1 id="引子">引子</h1>
<p>工作中使用 obsidian 和 xmind 做知识管理和总结，几乎形成了舒适的“工作流”，当然还打算继续优化。</p>
<p>自己的生活计划也在自己电脑上配了 obsidian 和 xmind，只是由于工作占用时间比较多，所以自己的 ob 和 xmind 没有形成良好的“笔记流”，需求并不强烈。</p>
<p>当然还有一个另外的原因，就是工作中的知识原则上属于公司，公司电脑上写好的东西不能用，自己要整理总结需要在自己电脑上从头开始，精力有限，今年工作又有些波折（详情见：带薪找工作）。所以搁置至今。</p>
<p>九月伊始，工作刚刚安定下来，相比于从前的工作，新的工作内容并不需要直接接触产品代码，这样基于k8s的一些学习就完全于工作无关，可以从一开始就在自己电脑上做积累。</p>
<h1 id="工具">工具</h1>
<p>obsidian 是良好的 markdown 写作工具，又兼具众多灵活的插件，甚至可以自己写插件（试着写过一个简单的sample，当时是重度用户）。</p>
<p>Gridea 是调研后发现最简单的 markdown 写博客的工具，专注于写作，不用因为折腾主题等而分心。试着写了几篇以后发现同步的问题，在社区中互相帮助，并且作者也有更新，总而言之是不错的体验。如果这个博客可以持续写下去，并且有朋友更新互动，就会考虑买域名和 Gridea 的云服务啦。</p>
<h1 id="笔记流">笔记流</h1>
<p>obsidian 作为个人的生活和学习笔记系统，会持续的积累。写的差不多的 markdown 文件可以拷贝到 Gridea 的文章路径，这样配置好就可以发表了。</p>
<p>现在写的博客还没有人看，所以会先将博客作为索引，用已经开始的博文倒逼自己有产出。目前的方向是学英语，云技术，找工作的记录这三个方面。</p>
<h1 id="下一步">下一步</h1>
<p>obsidian 有 WordPress 插件，未来如果真的打算经营自己的博客，还是会考虑通过 WordPress 作为真正的网站，毕竟是动态网站，插件更丰富，也不想再躺 js 的浑水。</p>
<p>obsidian 也可以直接发布为 github pages，具体如何做还不清楚，如果可以以 obsidian 为源，直接发布到静态和动态的网站，那就完美了，不过那是下一步再调查的事情了。</p>
<p>https://forum.obsidian.md/t/obsidian-github-pages-for-digital-gardeners/2622/7</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[阿里云公开课 - 3 - Kubernetes 核心概念]]></title>
        <id>https://essieplus.github.io/post/aliyun-open-course-note-3/</id>
        <link href="https://essieplus.github.io/post/aliyun-open-course-note-3/">
        </link>
        <updated>2022-08-16T05:18:17.000Z</updated>
        <content type="html"><![CDATA[<p>Kubernetes 核心概念</p>
<p>本次课程的分享主要围绕以下 3 个部分：</p>
<ul>
<li>什么是 Kubernetes ：介绍 Kubernetes 的主要功能以及能力；</li>
<li>Kubernetes 的架构：介绍 Kubernetes 的核心组件，以及介绍它们之间是如何相互互动连接；</li>
<li>Kubernetes 的核心概念与核心 API；</li>
</ul>
<h2 id="一-什么是-kubernetes">一、什么是 Kubernetes</h2>
<p>Kubernetes，从官方网站上可以看到，它是一个工业级的容器编排平台。Kubernetes 这个单词是希腊语，它的中文翻译是“舵手”或者“飞行员”。在一些常见的资料中也会看到“ks”这个词，也就是“k8s”，它是通过将8个字母“ubernete ”替换为“8”而导致的一个缩写。</p>
<p>Kubernetes 为什么要用“舵手”来命名呢？大家可以看一下这张图：</p>
<p>这是一艘载着一堆集装箱的轮船，轮船在大海上运着集装箱奔波，把集装箱送到它们该去的地方。我们之前其实介绍过一个概念叫做 container，container 这个英文单词也有另外的一个意思就是“集装箱”。Kubernetes 也就借着这个寓意，希望成为运送集装箱的一个轮船，来帮助我们管理这些集装箱，也就是管理这些容器。</p>
<p>这个就是为什么会选用 Kubernetes 这个词来代表这个项目的原因。更具体一点地来说：Kubernetes 是一个自动化的容器编排平台，它负责应用的部署、应用的弹性以及应用的管理，这些都是基于容器的。</p>
<h2 id="二-kubernetes-有如下几个核心的功能">二、Kubernetes 有如下几个核心的功能：</h2>
<p>服务的发现与负载的均衡；<br>
容器的自动装箱，我们也会把它叫做 scheduling，就是“调度”，把一个容器放到一个集群的某一个机器上，Kubernetes 会帮助我们去做存储的编排，让存储的声明周期与容器的生命周期能有一个连接；<br>
Kubernetes 会帮助我们去做自动化的容器的恢复。在一个集群中，经常会出现宿主机的问题或者说是 OS 的问题，导致容器本身的不可用，Kubernetes 会自动地对这些不可用的容器进行恢复；<br>
Kubernetes 会帮助我们去做应用的自动发布与应用的回滚，以及与应用相关的配置密文的管理；<br>
对于 job 类型任务，Kubernetes 可以去做批量的执行；<br>
为了让这个集群、这个应用更富有弹性，Kubernetes 也支持水平的伸缩。<br>
下面，我们希望以三个例子跟大家更切实地介绍一下 Kubernetes 的能力。</p>
<p>1、调度<br>
Kubernetes 可以把用户提交的容器放到 Kubernetes 管理的集群的某一台节点上去。Kubernetes 的调度器是执行这项能力的组件，它会观察正在被调度的这个容器的大小、规格。</p>
<p>比如说它所需要的 CPU以及它所需要的 memory，然后在集群中找一台相对比较空闲的机器来进行一次 placement，也就是一次放置的操作。在这个例子中，它可能会把红颜色的这个容器放置到第二个空闲的机器上，来完成一次调度的工作。</p>
<p>2、自动修复<br>
Kubernetes 有一个节点健康检查的功能，它会监测这个集群中所有的宿主机，当宿主机本身出现故障，或者软件出现故障的时候，这个节点健康检查会自动对它进行发现。</p>
<p>下面 Kubernetes 会把运行在这些失败节点上的容器进行自动迁移，迁移到一个正在健康运行的宿主机上，来完成集群内容器的一个自动恢复。</p>
<p>3、水平伸缩<br>
Kubernetes 有业务负载检查的能力，它会监测业务上所承担的负载，如果这个业务本身的 CPU 利用率过高，或者响应时间过长，它可以对这个业务进行一次扩容。</p>
<p>比如说在下面的例子中，黄颜色的过度忙碌，Kubernetes 就可以把黄颜色负载从一份变为三份。接下来，它就可以通过负载均衡把原来打到第一个黄颜色上的负载平均分到三个黄颜色的负载上去，以此来提高响应的时间。</p>
<p>以上就是 Kubernetes 三个核心能力的简单介绍。</p>
<p>三、Kubernetes 的架构<br>
Kubernetes 架构是一个比较典型的二层架构和 server-client 架构。Master 作为中央的管控节点，会去与 Node 进行一个连接。</p>
<p>所有 UI 的、clients、这些 user 侧的组件，只会和 Master 进行连接，把希望的状态或者想执行的命令下发给 Master，Master 会把这些命令或者状态下发给相应的节点，进行最终的执行。</p>
<p>Kubernetes 的 Master 包含四个主要的组件：API Server、Controller、Scheduler 以及 etcd。如下图所示：</p>
<ul>
<li>API Server：顾名思义是用来处理 API 操作的，Kubernetes 中所有的组件都会和 API Server 进行连接，组件与组件之间一般不进行独立的连接，都依赖于 API Server 进行消息的传送；</li>
<li>Controller：是控制器，它用来完成对集群状态的一些管理。比如刚刚我们提到的两个例子之中，第一个自动对容器进行修复、第二个自动进行水平扩张，都是由 Kubernetes 中的 Controller 来进行完成的；</li>
<li>Scheduler：是调度器，“调度器”顾名思义就是完成调度的操作，就是我们刚才介绍的第一个例子中，把一个用户提交的 Container，依据它对 CPU、对 memory 请求大小，找一台合适的节点，进行放置；</li>
<li>etcd：是一个分布式的一个存储系统，API Server 中所需要的这些原信息都被放置在 etcd 中，etcd 本身是一个高可用系统，通过 etcd 保证整个 Kubernetes 的 Master 组件的高可用性。</li>
</ul>
<p>我们刚刚提到的 API Server，它本身在部署结构上是一个可以水平扩展的一个部署组件；Controller 是一个可以进行热备的一个部署组件，它只有一个 active，它的调度器也是相应的，虽然只有一个 active，但是可以进行热备。</p>
<p>Kubernetes 的架构：Node<br>
Kubernetes 的 Node 是真正运行业务负载的，每个业务负载会以 Pod 的形式运行。等一下我会介绍一下 Pod 的概念。一个 Pod 中运行的一个或者多个容器，真正去运行这些 Pod 的组件的是叫做 kubelet，也就是 Node 上最为关键的组件，它通过 API Server 接收到所需要 Pod 运行的状态，然后提交到我们下面画的这个 Container Runtime 组件中。</p>
<p>在 OS 上去创建容器所需要运行的环境，最终把容器或者 Pod 运行起来，也需要对存储跟网络进行管理。Kubernetes 并不会直接进行网络存储的操作，他们会靠 Storage Plugin 或者是网络的 Plugin 来进行操作。用户自己或者云厂商都会去写相应的 Storage Plugin 或者 Network Plugin，去完成存储操作或网络操作。</p>
<p>在 Kubernetes 自己的环境中，也会有 Kubernetes 的 Network，它是为了提供 Service network 来进行搭网组网的。（等一下我们也会去介绍“service”这个概念。）真正完成 service 组网的组件的是 Kube-proxy，它是利用了 iptable 的能力来进行组建 Kubernetes 的 Network，就是 cluster network，以上就是 Node 上面的四个组件。</p>
<p>Kubernetes 的 Node 并不会直接和 user 进行 interaction，它的 interaction 只会通过 Master。而 User 是通过 Master 向节点下发这些信息的。Kubernetes 每个 Node 上，都会运行我们刚才提到的这几个组件。</p>
<p>下面我们以一个例子再去看一下 Kubernetes 架构中的这些组件，是如何互相进行 interaction 的。</p>
<p>用户可以通过 UI 或者 CLI 提交一个 Pod 给 Kubernetes 进行部署，这个 Pod 请求首先会通过 CLI 或者 UI 提交给 Kubernetes API Server，下一步 API Server 会把这个信息写入到它的存储系统 etcd，之后 Scheduler 会通过 API Server 的 watch 或者叫做 notification 机制得到这个信息：有一个 Pod 需要被调度。</p>
<p>这个时候 Scheduler 会根据它的内存状态进行一次调度决策，在完成这次调度之后，它会向 API Server report 说：“OK！这个 Pod 需要被调度到某一个节点上。”</p>
<p>这个时候 API Server 接收到这次操作之后，会把这次的结果再次写到 etcd 中，然后 API Server 会通知相应的节点进行这次 Pod 真正的执行启动。相应节点的 kubelet 会得到这个通知，kubelet 就会去调 Container runtime 来真正去启动配置这个容器和这个容器的运行环境，去调度 Storage Plugin 来去配置存储，network Plugin 去配置网络。</p>
<p>这个例子我们可以看到：这些组件之间是如何相互沟通相互通信，协调来完成一次Pod的调度执行操作的。</p>
<h2 id="四-kubernetes-的核心概念与它的-api">四、Kubernetes 的核心概念与它的 API</h2>
<p>核心概念<br>
第一个概念：Pod<br>
Pod 是 Kubernetes 的一个最小调度以及资源单元。用户可以通过 Kubernetes 的 Pod API 生产一个 Pod，让 Kubernetes 对这个 Pod 进行调度，也就是把它放在某一个 Kubernetes 管理的节点上运行起来。一个 Pod 简单来说是对一组容器的抽象，它里面会包含一个或多个容器。</p>
<p>比如像下面的这幅图里面，它包含了两个容器，每个容器可以指定它所需要资源大小。比如说，一个核一个 G，或者说 0.5 个核，0.5 个 G。</p>
<p>当然在这个 Pod 中也可以包含一些其他所需要的资源：比如说我们所看到的 Volume 卷这个存储资源；比如说我们需要 100 个 GB 的存储或者 20GB 的另外一个存储。</p>
<p>在 Pod 里面，我们也可以去定义容器所需要运行的方式。比如说运行容器的 Command，以及运行容器的环境变量等等。Pod 这个抽象也给这些容器提供了一个共享的运行环境，它们会共享同一个网络环境，这些容器可以用 localhost 来进行直接的连接。而 Pod 与 Pod 之间，是互相有 isolation 隔离的。</p>
<p>第二个概念：Volume<br>
Volume 就是卷的概念，它是用来管理 Kubernetes 存储的，是用来声明在 Pod 中的容器可以访问文件目录的，一个卷可以被挂载在 Pod 中一个或者多个容器的指定路径下面。</p>
<p>而 Volume 本身是一个抽象的概念，一个 Volume 可以去支持多种的后端的存储。比如说 Kubernetes 的 Volume 就支持了很多存储插件，它可以支持本地的存储，可以支持分布式的存储，比如说像 ceph，GlusterFS ；它也可以支持云存储，比如说阿里云上的云盘、AWS 上的云盘、Google 上的云盘等等。</p>
<p>第三个概念：Deployment<br>
Deployment 是在 Pod 这个抽象上更为上层的一个抽象，它可以定义一组 Pod 的副本数目、以及这个 Pod 的版本。一般大家用 Deployment 这个抽象来做应用的真正的管理，而 Pod 是组成 Deployment 最小的单元。</p>
<p>Kubernetes 是通过 Controller，也就是我们刚才提到的控制器去维护 Deployment 中 Pod 的数目，它也会去帮助 Deployment 自动恢复失败的 Pod。</p>
<p>比如说我可以定义一个 Deployment，这个 Deployment 里面需要两个 Pod，当一个 Pod 失败的时候，控制器就会监测到，它重新把 Deployment 中的 Pod 数目从一个恢复到两个，通过再去新生成一个 Pod。通过控制器，我们也会帮助完成发布的策略。比如说进行滚动升级，进行重新生成的升级，或者进行版本的回滚。</p>
<p>第四个概念：Service<br>
Service 提供了一个或者多个 Pod 实例的稳定访问地址。</p>
<p>比如在上面的例子中，我们看到：一个 Deployment 可能有两个甚至更多个完全相同的 Pod。对于一个外部的用户来讲，访问哪个 Pod 其实都是一样的，所以它希望做一次负载均衡，在做负载均衡的同时，我只想访问某一个固定的 VIP，也就是 Virtual IP 地址，而不希望得知每一个具体的 Pod 的 IP 地址。</p>
<p>我们刚才提到，这个 pod 本身可能 terminal go（终止），如果一个 Pod 失败了，可能会换成另外一个新的。</p>
<p>对一个外部用户来讲，提供了多个具体的 Pod 地址，这个用户要不停地去更新 Pod 地址，当这个 Pod 再失败重启之后，我们希望有一个抽象，把所有 Pod 的访问能力抽象成一个第三方的一个 IP 地址，实现这个的 Kubernetes 的抽象就叫 Service。</p>
<p>实现 Service 有多种方式，Kubernetes 支持 Cluster IP，上面我们讲过的 kuber-proxy 的组网，它也支持 nodePort、 LoadBalancer 等其他的一些访问的能力。</p>
<h2 id="第五个概念namespace">第五个概念：Namespace</h2>
<p>Namespace 是用来做一个集群内部的逻辑隔离的，它包括鉴权、资源管理等。Kubernetes 的每个资源，比如刚才讲的 Pod、Deployment、Service 都属于一个 Namespace，同一个 Namespace 中的资源需要命名的唯一性，不同的 Namespace 中的资源可以重名。</p>
<p>Namespace 一个用例，比如像在阿里巴巴，我们内部会有很多个 business units，在每一个 business units 之间，希望有一个视图上的隔离，并且在鉴权上也不一样，在 cuda 上面也不一样，我们就会用 Namespace 来去给每一个 BU 提供一个他所看到的这么一个看到的隔离的机制。</p>
<p>Kubernetes 的 API<br>
下面我们介绍一下 Kubernetes 的 API 的基础知识。从 high-level 上看，Kubernetes API 是由 HTTP+JSON 组成的：用户访问的方式是 HTTP，访问的 API 中 content 的内容是 JSON 格式的。</p>
<p>Kubernetes 的 kubectl 也就是 command tool，Kubernetes UI，或者有时候用 curl，直接与 Kubernetes 进行沟通，都是使用 HTTP + JSON 这种形式。</p>
<p>下面有个例子：比如说，对于这个 Pod 类型的资源，它的 HTTP 访问的路径，就是 API，然后是 apiVesion: V1, 之后是相应的 Namespaces，以及 Pods 资源，最终是 Podname，也就是 Pod 的名字。</p>
<p>如果我们去提交一个 Pod，或者 get 一个 Pod 的时候，它的 content 内容都是用 JSON 或者是 YAML 表达的。上图中有个 yaml 的例子，在这个 yaml file 中，对 Pod 资源的描述也分为几个部分。</p>
<p>第一个部分，一般来讲会是 API 的 version。比如在这个例子中是 V1，它也会描述我在操作哪个资源；比如说我的 kind 如果是 pod，在 Metadata 中，就写上这个 Pod 的名字；比如说 nginx，我们也会给它打一些 label，我们等下会讲到 label 的概念。在 Metadata 中，有时候也会去写 annotation，也就是对资源的额外的一些用户层次的描述。</p>
<p>比较重要的一个部分叫做 Spec，Spec 也就是我们希望 Pod 达到的一个预期的状态。比如说它内部需要有哪些 container 被运行；比如说这里面有一个 nginx 的 container，它的 image 是什么？它暴露的 port 是什么？</p>
<p>当我们从 Kubernetes API 中去获取这个资源的时候，一般来讲在 Spec 下面会有一个项目叫 status，它表达了这个资源当前的状态；比如说一个 Pod 的状态可能是正在被调度、或者是已经 running、或者是已经被 terminates，就是被执行完毕了。</p>
<p>刚刚在 API 之中，我们讲了一个比较有意思的 metadata 叫做“label”，这个 label 可以是一组 KeyValuePair。</p>
<p>比如下图的第一个 pod 中，label 就可能是一个 color 等于 red，即它的颜色是红颜色。当然你也可以加其他 label，比如说 size: big 就是大小，定义为大的，它可以是一组 label。</p>
<p>这些 label 是可以被 selector，也就是选择器所查询的。这个能力实际上跟我们的 sql 类型的 select 语句是非常相似的，比如下图中的三个 Pod 资源中，我们就可以进行 select。name color 等于 red，就是它的颜色是红色的，我们也可以看到，只有两个被选中了，因为只有他们的 label 是红色的，另外一个 label 中写的 color 等于 yellow，也就是它的颜色是黄色，是不会被选中的。</p>
<p>通过 label，kubernetes 的 API 层就可以对这些资源进行一个筛选，那这些筛选也是 kubernetes 对资源的集合所表达默认的一种方式。</p>
<p>例如说，我们刚刚介绍的 Deployment，它可能是代表一组的 Pod，它是一组 Pod 的抽象，一组 Pod 就是通过 label selector 来表达的。当然我们刚才讲到说 service 对应的一组 Pod，就是一个 service 要对应一个或者多个的 Pod，来对它们进行统一的访问，这个描述也是通过 label selector 来进行 select 选取的一组 Pod。</p>
<p>所以可以看到 label 是一个非常核心的 kubernetes API 的概念，我们在接下来的课程中也会着重地去讲解和介绍 label 这个概念，以及如何更好地去使用它。</p>
<p>五、以一个 demo 结尾<br>
最后一部分，我想以一个例子来结束，让大家跟我一起来尝试一个 kubernetes，在尝试 Kubernetes 之前，我希望大家能在本机上安装一下 Kubernetes，安装一个 Kubernetes 沙箱环境。</p>
<p>安装这个沙箱环境，主要有三个步骤：</p>
<p>首先需要安装一个虚拟机，来在虚拟机中启动 Kubernetes。我们会推荐大家利用 virtualbox 来作为虚拟机的运行环境；<br>
安装 VirtualBox： https://www.virtualbox.org/wiki/Downloads</p>
<p>其次我们需要在虚拟机中启动 Kubernetes，Kubernetes 有一个非常有意思的项目，叫 minikube，也就是启动一个最小的 local 的 Kubernetes 的一个环境。<br>
minikube 我们推荐使用下面写到的阿里云的版本，它和官方 minikube 的主要区别就是把 minikube 中所需要的 Google 上的依赖换成国内访问比较快的一些镜像，这样就方便了大家的安装工作；</p>
<p>安装 MiniKube（中国版）: https://yq.aliyun.com/articles/221687</p>
<p>最后在安装完 virtualbox 和 minikube 之后，大家可以对 minikube 进行启动，也就是下面这个命令。<br>
启动命令：minikube start —vm-driver virtualbox</p>
<p>如果大家不是 Mac 系统，其他操作系统请访问下面这个链接，查看其它操作系统如何安装 minikube 沙箱环境。</p>
<p>https://kubernetes.io/docs/tasks/tools/install-minikube/</p>
<p>当大家安装好之后，我会跟大家一起做一个例子，来做三件事情：</p>
<p>提交一个 nginx deployment；<br>
kubectl apply -f https://k8s.io/examples/application/deployment.yaml</p>
<p>升级 nginx deployment；<br>
kubectl apply -f https://k8s.io/examples/application/deployment-update.yaml</p>
<p>扩容 nginx deployment。<br>
kubectl apply -f https://k8s.io/examples/application/deployment-scale.yaml</p>
<p>第一步，我们提交一个 nginx 的 Deployment，然后对这个 Deployment 进行一次版本升级，也就是改变它中间 Pod 的版本。最后我们也会尝试对 nginx 进行一次扩容，进行一次水平的伸缩，下面就让大家一起跟我来尝试这三个操作吧。</p>
<p>首先，我们先看一下 minikube 的 status，可以看到 kubelet master 和 kubectl 都是配置好的。</p>
<p>下一步我们利用 kubectl 来看一下这个集群中节选的状态，可以看到这个master 的节点已经是running状态：</p>
<p>我们就以这个为节点，下面我们尝试去看一下现在集群中 Deployment 这个资源：</p>
<p>可以看到集群中没有任何的 Deployment，我们可以利用 watch 这个语义去看集群中 Deployment 这个资源的变化情况。</p>
<p>下面我们去做刚才想要的三个操作：第一个操作是去创建一个 Deployment。可以看到下面第一个图，这是一个 API 的 content，它的 kind 是 Deployment，name 是 nginx-deployment, 有图中它的 replicas 数目是2，它的镜像版本是 1.7.9。</p>
<p>我们下面还是回到 kubectl 这个 commnd 来执行这次 Deployment 的真正的操作。我们可以看到一个简单的操作，就会去让 Deployment 不停地生成副本。</p>
<p>Deployment 副本数目是 2 个，下面也可以 describe 一下现在的 Deployment 的状态。我们知道之前是没有这个 Deployment 的，现在我们去 describe 这个 nginx-deployment。</p>
<p>下图中可以看到：有一个 nginx-deployment 已经被生成了，它的 replicas 数目也是我们想要的、selector 也是我们想要的、它的 image 的版本也是 1.7.9。还可以看到，里面的 deployment-controller 这种版本控制器也是在管理它的生成。</p>
<p>下面我们去升级这个 Deployment 版本，首先下载另外一个 yaml 文件 deployment-update.yaml，可以看到这里面的 image 本身的版本号从 1.7.9 升级到 1.8。</p>
<p>接下来我们重新 apply 新的 deployment-update 这个 yaml 文件。</p>
<p>可以看到，在另一边的屏幕上显示出了这个 Deployment 升级的一些操作，最终它的 up-to-date 值从 0 变成了 2，也就是说所有的容器都是最新版本的，所有的 Pod 都是最新版本的。我们也可以 discribe 具体去看一下是不是所有 Pod 的版本都被更新了，可以看到这个 image 的版本由 1.7.9 真正更新到了 1.8。</p>
<p>最后，我们也可以看到 controller 又执行了几次新的操作，这个控制器维护了整个 Deployment 和 Pod 状态。</p>
<p>最后我们演示一下给 Deployment 做水平扩张，下载另一个 yaml 文件 deployment-scale.yaml，这里面的 replicas 数目已经从 2 改成了 4。</p>
<p>回到最开始的窗口，用 kubectl 去 apply 这个新的 deployment-scale.yaml 文件，在另外一个窗口上可以看到，当我们执行了 deployment-scale 操作之后，它的容器 Pod 数目从 2 变成了 4。我们可以再一次 describ 一下当前集群中的 deployment 的情况，可以看到它的 replicas 的数目从 2 变到了 4，同时也可以看到 controller 又做了几次新的操作，这个 scale up 成功了。</p>
<p>最后，让我们利用 delete 操作把我们刚才生成的 Deployment 给删除掉。kubectl delete deployment，也是刚才我们本身的 deployment name，当我们把它删除掉之后，我们今天所有的操作就完成了。</p>
<p>我们再去重新 get 这个 Deployment，也会显示这个资源不再存在，这个集群又回到了最开始干净的状态。</p>
<p>以上这就是这堂课中所有的内容了，我们关注了 kubernetes 的核心概念以及 kubernetes 的架构设计，希望大家能在这节课中有所收获，也希望大家能关注云原生技术课堂中的其他内容，谢谢大家的观看！</p>
<p>本节总结<br>
Kubernetes 是一个自动化的容器编排平台，它负责应用的部署、应用的弹性以及应用的管理，这些都是基于容器的；<br>
Kubernetes 架构是一个比较典型的二层架构和 server-client 架构；</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[带薪找工作]]></title>
        <id>https://essieplus.github.io/post/finding-new-job-with-salary/</id>
        <link href="https://essieplus.github.io/post/finding-new-job-with-salary/">
        </link>
        <updated>2022-08-08T03:30:27.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<h2 id="非典型的变动">非典型的变动</h2>
<p>大公司中裁员一般比较典型：自己的人头冻结就期限之前安心拿包走人，找下一份工作；内部还有机会就面试看看，有好的机会也可以去其他的组。</p>
<p>我在7月份遇到了独特的非典型变动。说来话长，有空再详细写，总而言之是尚无明确的离开期限，但是后面的去向也是完完全全依赖于庞大公司内部的架构变动，总结下来居然是无法预知的期限，无法预知流程，更无法预知去向的一个纯粹的随其自然过程。</p>
<h2 id="亲身体验乐观锁">亲身体验乐观锁</h2>
<p>7月初面试了公司内部的一个做AI的组，7月最后一个月拿到offer，本来的预期是8月份开始新的工作，并且重拾了Scala的内容，然而去新的组的流程被锁住了，给我发offer的组属于另外一个Business Unit，2Q的结果不好，原来的开放招聘被加了条件，只能是招属于自己BU的人。</p>
<p>在大公司中，即使是为自己组招人的经理，所做的决定也是附带着各种高优先级条件的，而这些高优先级的条件是在乐观锁的机制下执行，有一定程度的回滚机制（毕竟人会自己找其他方式调节），有空可以做一下实现。</p>
<p>Anyway，又回到了带薪找工作的轨道上，我的下一份DevOps的工作在哪里，是在公司之内还是在公司之外呢？</p>
<h2 id="尘埃落定">尘埃落定</h2>
<p>9月初公司唯一的一个正在拉人头的组被锁定了，我的本地老板把我安排了过去，相比于之前完全写工具的SRE工作，这个工作更多的与客户经理打交道，对我而言是不错的经历，整个团队人不多，分散在不同的时区。</p>
<p>10月以后团队又要来一位技术好，人又热情的同事，方向感更好了一些。目前除了需要我大量自学，并且经理在加拿大以外，并无更多不合适的地方了。会在挑战中学习，并且持续的进步。</p>
<p>作为女性，言语无味，面目寡淡，家境普通，经济基础薄弱，自知在这个社会中很少有成家立业的可能性。也想一直做书呆子，不要被光怪陆离的世界改变。作为工程师技术一般，在企业软件倾颓互联网兴起的时代，想持续做一件事情也不可得，被迫颠沛流离在不同的产品和角色里。</p>
<p>我并非不世出之才，半浸经史子集，半入圣贤之道，无非勉强独善其身。一直以来自我的计划都是没有计划，也没有人需要我为其负责。这次的变动其实也知道公司无裁人的计划与资金，也并无真正的凶险，尘埃落定后，应是一切如常。</p>
<h2 id="波澜再起">波澜再起</h2>
<p>在变动之中我虽然知道大概率是另一种意思的一成不变，但是也试着重新思考自己下一步的可能性，想要走一条不同的路，去试试同事们所在的那个环境，试试有工作就安心做，不需要过度担忧与内卷的状态。大概制定了一个方向，缓慢推进也许需要几年的时间才能实现，但是设定了这样一个方向，将其作为我日常生活的side project，使得我面向更大的可能。</p>
<p>这个过程中机缘巧合的加强了我与一个熟人的弱连接，本来只是无心的分享与语言的交换，从熟人到朋友，分享彼此的人生，似乎出现了另外的可能性...</p>
<h2 id="后记">后记</h2>
<p>带薪找工作的故事就这样结束了，但是Essie plus the world的故事却开启了，在这个博客中，我开始向世界表达自己，也希望得到世界的回应。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何最慢考到心仪的雅思分数]]></title>
        <id>https://essieplus.github.io/post/how-to-pass-ielts-most-slow/</id>
        <link href="https://essieplus.github.io/post/how-to-pass-ielts-most-slow/">
        </link>
        <updated>2022-07-11T08:31:04.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  最慢的路径<br>
✍️  不可能的挑战<br>
...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  最慢的路径<br>
✍️  不可能的挑战<br>
...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="https://fehey.com/">示例网站</a></p>
<h2 id="引子">引子</h2>
<p>如果问如何最快考到心仪的雅思分数，有各种各样的信息，总结下来一般是花很多钱，报一个靠谱的雅思机构，接受几个月的集中训练，就可以达到了。这些机构有大有小，各有所长，可以通过对雅思考试的了解帮助考生在英语水平没有明显提升的情况下达到较高的分数。</p>
<p>如果一个已经工作的人，年龄不小，英语并不非常好，不知道自己需要多久才能考到合适的分数呢？如果他（或她）知道移民已经太卷，考了很高的雅思成绩也未必能排的到呢？如果他（或她）经济条件并不够好，必须要保住现有的工作而不能辞职准备呢？如果他（或她）所在行业又累又不景气，不能占用太多时间呢？</p>
<h2 id="解决问题">解决问题</h2>
<ul>
<li>首次考雅思，四门课都要准备</li>
<li>目标不明确，不想影响当前的生活</li>
<li>随缘备考，考多少分也未必能达到下一步</li>
<li>工作比较忙，没有大量时间冲刺学习</li>
<li>希望以一定速度坚持，不要放弃</li>
<li>希望学习内容反馈到工作</li>
</ul>
<h2 id="雅思计划">雅思计划</h2>
<ul>
<li>Round 1
<ul>
<li>NGSL</li>
<li>同义替换</li>
</ul>
</li>
<li>单词篇</li>
<li>听力篇</li>
<li>阅读篇</li>
<li>写作篇</li>
<li>口语篇</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[博客写作工具箱]]></title>
        <id>https://essieplus.github.io/post/toolbox-for-blog/</id>
        <link href="https://essieplus.github.io/post/toolbox-for-blog/">
        </link>
        <updated>2022-07-11T07:17:28.000Z</updated>
        <content type="html"><![CDATA[<h1 id="图片下载网站">图片下载网站</h1>
<p>目前正在用</p>
<ul>
<li><a href="https://www.pexels.com/">Pexels</a></li>
<li>专用图片
<ul>
<li><a href="https://naldc.nal.usda.gov/usda_pomological_watercolor?page=4&amp;q=&amp;search_field=all_fields">水果图库</a></li>
</ul>
</li>
</ul>
<h1 id="图片搜索工作流">图片搜索工作流</h1>
<ul>
<li>Toby 中创建 blog space</li>
<li>将常用搜图网站加载到 collection</li>
<li>优先使用 link 即可访问的图片</li>
</ul>
<h1 id="markdown-写作工具">Markdown 写作工具</h1>
<ul>
<li>Typoa ？</li>
<li>Obsidian
<ul>
<li>双向链接此处其实增加了麻烦</li>
<li>ob 插件的语法Markdown不兼容</li>
</ul>
</li>
</ul>
<h1 id="域名">域名</h1>
<ul>
<li>
<p><a href="https://zhuanlan.zhihu.com/p/259349066">域名在线工具</a></p>
</li>
<li>
<p>References:</p>
<ul>
<li><a href="https://www.zhihu.com/question/19619335/answer/160341786">有哪些高质量的图片网站（社区）推荐？</a></li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[个人向-博客写作指南]]></title>
        <id>https://essieplus.github.io/post/blog-guideline-for-myself/</id>
        <link href="https://essieplus.github.io/post/blog-guideline-for-myself/">
        </link>
        <updated>2022-07-11T05:57:05.000Z</updated>
        <content type="html"><![CDATA[<h1 id="给自己写说明书">给自己写说明书</h1>
<p>自己架设博客的工作流是比较复杂的，相信在写作过程中也会不断的迭代升级，为了防止遗忘，建立升级的baseline，还是决定给自己写一篇继续写作的指南。</p>
<h1 id="解决的问题">解决的问题</h1>
<ul>
<li>写作与发布的快速试错与迭代</li>
<li>写作与博客分离
<ul>
<li>Bluehost 中 WordPress 主题不好编辑</li>
<li>使用简单的 Markdown 风格</li>
</ul>
</li>
</ul>
<h1 id="建站过程">建站过程</h1>
<ul>
<li>参考链接 https://www.zhihu.com/search?type=content&amp;q=%E5%8D%9A%E5%AE%A2%20gridea</li>
<li>创建 username.github.io repo</li>
<li>Gridea 配置github repo 连接</li>
<li>markdown 写博客
<ul>
<li>essieplus.github.io/posts</li>
</ul>
</li>
<li>主题的替换
<ul>
<li>官方主题商店
<ul>
<li>https://gridea.dev/themes/</li>
</ul>
</li>
<li>导入 essieplus.github.io/themes</li>
</ul>
</li>
</ul>
<h1 id="下一步">下一步</h1>
<ul>
<li>学英语的打卡贴</li>
<li>obsidian的使用贴</li>
<li>图片工具
<ul>
<li>current：直接引用link</li>
<li>图片在github管理
<ul>
<li>https://zhuanlan.zhihu.com/p/138012354</li>
</ul>
</li>
</ul>
</li>
<li>留言工具
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/258592325">Gitalk 配置</a></li>
</ul>
</li>
<li>向其他框架迁移
<ul>
<li>仍然是 markdown</li>
<li>更好控制的框架</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://essieplus.github.io/post/hello-gridea/</id>
        <link href="https://essieplus.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="https://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>